import{_ as s,c as i,o as n,ag as e}from"./chunks/framework.C78-raJP.js";const k=JSON.parse('{"title":"CachedFunction Class","description":"","frontmatter":{},"headers":[],"relativePath":"cachedfunction.md","filePath":"cachedfunction.md"}'),t={name:"cachedfunction.md"};function h(l,a,r,c,o,p){return n(),i("div",null,a[0]||(a[0]=[e(`<h1 id="cachedfunction-class" tabindex="-1">CachedFunction Class <a class="header-anchor" href="#cachedfunction-class" aria-label="Permalink to &quot;CachedFunction Class&quot;">​</a></h1><h2 id="constructor" tabindex="-1">Constructor <a class="header-anchor" href="#constructor" aria-label="Permalink to &quot;Constructor&quot;">​</a></h2><p>The constructor takes a type of <a href="/interfaces#icachedfunctionconstructorops">ICachedFunctionConstructorOps</a></p><h3 id="example" tabindex="-1">Example <a class="header-anchor" href="#example" aria-label="Permalink to &quot;Example&quot;">​</a></h3><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { CachedFunction } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;cachesjs&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> reallyComplexFunction</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // do some API calls or long tasks;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> myFunc</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> CachedFunction</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;myFunc&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    func: reallyComplexFunction,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ttl: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;5m&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // Optional, If not set default will be 5 mins</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><h2 id="methods" tabindex="-1">Methods <a class="header-anchor" href="#methods" aria-label="Permalink to &quot;Methods&quot;">​</a></h2><p>Given below are the methods available in the <code>CachedFunction</code> class.</p><h2 id="runsync-args" tabindex="-1">runSync(...args) <a class="header-anchor" href="#runsync-args" aria-label="Permalink to &quot;runSync(...args)&quot;">​</a></h2><p>Run the function synchronously. Return Type: <code>&lt;R&gt;</code></p><h2 id="runasync-args" tabindex="-1">runAsync(...args) <a class="header-anchor" href="#runasync-args" aria-label="Permalink to &quot;runAsync(...args)&quot;">​</a></h2><p>Run the function asynchronously. Return Type: <code>Promise&lt;R&gt;</code></p><h2 id="getcachedvalue-args" tabindex="-1">getCachedValue(...args) <a class="header-anchor" href="#getcachedvalue-args" aria-label="Permalink to &quot;getCachedValue(...args)&quot;">​</a></h2><p>Get the cached value of the provided arguments. Return Type: <code>R | Promise&lt;R&gt; | undefined</code></p><h2 id="has-args" tabindex="-1">has(...args) <a class="header-anchor" href="#has-args" aria-label="Permalink to &quot;has(...args)&quot;">​</a></h2><p>Check if the given argument is stored in the cache. Return Type: <code>boolean</code></p><h2 id="clear" tabindex="-1">clear() <a class="header-anchor" href="#clear" aria-label="Permalink to &quot;clear()&quot;">​</a></h2><p>Clear all the cached data. Return Type: <code>void</code></p>`,17)]))}const u=s(t,[["render",h]]);export{k as __pageData,u as default};
