import{_ as a,c as s,o as i,ag as t}from"./chunks/framework.C78-raJP.js";const p=JSON.parse('{"title":"TimedCache Class","description":"","frontmatter":{},"headers":[],"relativePath":"timedcache.md","filePath":"timedcache.md"}'),h={name:"timedcache.md"};function l(r,e,n,d,o,c){return i(),s("div",null,e[0]||(e[0]=[t(`<h1 id="timedcache-class" tabindex="-1">TimedCache Class <a class="header-anchor" href="#timedcache-class" aria-label="Permalink to &quot;TimedCache Class&quot;">​</a></h1><h2 id="constructor" tabindex="-1">Constructor <a class="header-anchor" href="#constructor" aria-label="Permalink to &quot;Constructor&quot;">​</a></h2><p>The constructor takes of type of <a href="/interfaces#itimedcacheconstructorops">ITimedCacheConstructorOps</a></p><h3 id="example" tabindex="-1">Example <a class="header-anchor" href="#example" aria-label="Permalink to &quot;Example&quot;">​</a></h3><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { TimedCache } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;cachesjs&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> myCache</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> TimedCache</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;MyCache&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    onExpire</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">key</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">key</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">} has expired.\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// optional </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    defaultTTL: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;10m&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // Optional - Default TTL for all created keys || If not provided default will be 5 minutes </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><h2 id="methods" tabindex="-1">Methods <a class="header-anchor" href="#methods" aria-label="Permalink to &quot;Methods&quot;">​</a></h2><p>Given below are the methods available in the <code>TimedCache</code> class.</p><h2 id="add-key-value-ttl" tabindex="-1">add(key, value, ttl?) <a class="header-anchor" href="#add-key-value-ttl" aria-label="Permalink to &quot;add(key, value, ttl?)&quot;">​</a></h2><p>Add a key to the cache. Return Type: <code>void</code></p><h3 id="parameters" tabindex="-1">Parameters <a class="header-anchor" href="#parameters" aria-label="Permalink to &quot;Parameters&quot;">​</a></h3><ul><li><code>key</code> <em>[string]</em>: The key to be used to access the value.</li><li><code>value</code> <em>[V]</em>: The value to be stored, type is assigned on creating the class.</li><li><code>ttl?</code> <em>[string]</em>: A specific TTL to use for this specific key, if not provided the default one will be used.</li></ul><h2 id="get-key" tabindex="-1">get(key) <a class="header-anchor" href="#get-key" aria-label="Permalink to &quot;get(key)&quot;">​</a></h2><p>Searches the key in the cache and returns the value. Return Type: <code>&lt;V&gt;</code></p><h3 id="parameters-1" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-1" aria-label="Permalink to &quot;Parameters&quot;">​</a></h3><ul><li><code>key</code> <em>[string]</em>: The key used to find the stored value.</li></ul><h2 id="delete-key" tabindex="-1">delete(key) <a class="header-anchor" href="#delete-key" aria-label="Permalink to &quot;delete(key)&quot;">​</a></h2><p>Deletes the provided key from the cache. Return Type: <code>boolean</code></p><h3 id="parameters-2" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-2" aria-label="Permalink to &quot;Parameters&quot;">​</a></h3><ul><li><code>key</code> <em>[string]</em>: The key to delete.</li></ul><h2 id="check-key" tabindex="-1">check(key) <a class="header-anchor" href="#check-key" aria-label="Permalink to &quot;check(key)&quot;">​</a></h2><p>Check if the key exists in the cache. Return Type: <code>boolean</code></p><h3 id="parameters-3" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-3" aria-label="Permalink to &quot;Parameters&quot;">​</a></h3><ul><li><code>key</code> <em>[string]</em>: The key to search.</li></ul><h2 id="hasexpired-key" tabindex="-1">hasExpired(key) <a class="header-anchor" href="#hasexpired-key" aria-label="Permalink to &quot;hasExpired(key)&quot;">​</a></h2><p>See if the given key has expired. Return Type: <code>boolean</code></p><h3 id="parameters-4" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-4" aria-label="Permalink to &quot;Parameters&quot;">​</a></h3><ul><li><code>key</code> <em>[string]</em>: The key to check</li></ul><h2 id="clear" tabindex="-1">clear() <a class="header-anchor" href="#clear" aria-label="Permalink to &quot;clear()&quot;">​</a></h2><p>Clear the cache. Return Type: <code>void</code></p><p><em>Clearing the cache includes clearing all the data inside it.</em></p><h2 id="size" tabindex="-1">size() <a class="header-anchor" href="#size" aria-label="Permalink to &quot;size()&quot;">​</a></h2><p>Returns the size of the cache. Return Type: <code>number</code></p><h2 id="keys" tabindex="-1">keys() <a class="header-anchor" href="#keys" aria-label="Permalink to &quot;keys()&quot;">​</a></h2><p>Returns all the keys in the cache. Return Type: <code>string[]</code></p><h2 id="values" tabindex="-1">values() <a class="header-anchor" href="#values" aria-label="Permalink to &quot;values()&quot;">​</a></h2><p>Returns all the values in the cache. Return Type: <code>&lt;V&gt;[]</code></p><h2 id="entires" tabindex="-1">entires() <a class="header-anchor" href="#entires" aria-label="Permalink to &quot;entires()&quot;">​</a></h2><p>Returns all the entries in the cache. Return Type: <code>[string, &lt;V&gt;][]</code></p>`,38)]))}const u=a(h,[["render",l]]);export{p as __pageData,u as default};
